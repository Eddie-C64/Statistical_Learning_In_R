getwd()
install.packages('reshape2')
?cut
setwd("CodingComplication/DataScienceProjects/EDA_Udacity/Multi_Variable_Exploration)
library('ggplot2')
data(diamonds)
qplot(data = diamonds, x = carat, y = price,
xlim = c(0, quantile(diamonds$carat, 0.99)),
ylim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('black'), shape = 21)
qplot(data = diamonds, x = carat, y = price,
xlim = c(0, quantile(diamonds$carat, 0.99)),
ylim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('blue'), shape = 21)
ggplot(data = diamonds,aes( x = carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('blue'), alpha = 1/4)
ggplot(data = diamonds,aes( x = carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('blue'), alpha = 1/4) +
stat_smooth(method = 'lm', formula = price ~ log(carat), se = F)
```
ggplot(data = diamonds,aes( x = carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('blue'), alpha = 1/4) +
stat_smooth(method = 'lm', formula = diamonds$price ~ log(diamonds$carat), se = F)
library(GGally)
library(ggplot2)
library(scales)
library(memisc)
library(lattice)
library(MASS)
library(car)
library(reshape)
library(plyr)
data(diamonds)
ggplot(data = diamonds,aes( x = carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('blue'), alpha = 1/4) +
stat_smooth(method = 'lm', formula = diamonds$price ~ log(diamonds$carat), se = F)
install.packages("car")
install.packages("scale")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("memisc")
install.packages("MASS")
install.packages("reshape")
install.packages("plyr")
install.packages("plyr")
library(GGally)
library(ggplot2)
library(scales)
library(memisc)
library(lattice)
library(MASS)
library(car)
library(reshape)
library(plyr)
data(diamonds)
ggplot(data = diamonds,aes( x = carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('blue'), alpha = 1/4) +
stat_smooth(method = 'lm', formula = diamonds$price ~ log(diamonds$carat), se = F)
library(GGally)
library(ggplot2)
library(scales)
library(memisc)
library(lattice)
library(MASS)
library(car)
library(reshape)
library(plyr)
library(gridExtra)
plot1 <- qplot(data = diamonds, x = carat, y = price) +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = log(carat), y = price) +
ggtitle('Price (log10)')
grid.arrange()
install.packages("gridExtra")
library(gridExtra)
plot1 <- qplot(data = diamonds, x = carat, y = price) +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = log(carat), y = price) +
ggtitle('Price (log10)')
grid.arrange()
library(gridExtra)
plot1 <- qplot(data = diamonds, x = price) +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = price) +
ggtitle('Price (log10)')
+ scale_x_log10()
grid.arrange()
install.packages(grid)
install.packages("grid")
install.packages("grid")
library(gridExtra)
library(grid)
plot1 <- qplot(data = diamonds, x = price) +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = price) +
ggtitle('Price (log10)')
+ scale_x_log10()
grid.arrange(plot1, plot2, ncol = 2)
plot1 <- qplot(data = diamonds, x = price, binwidth = 100, fill = I('#099DD9')) +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.01, fill = I('#F79420')) +
ggtitle('Price (log10)')
+ scale_x_log10()
grid.arrange(plot1, plot2, ncol = 2)
library(gridExtra)
library(grid)
plot1 <- qplot(data = diamonds, x = price, binwidth = 100, fill = I('#099DD9')) +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.01, fill = I('#F79420')) +
ggtitle('Price (log10)') +
scale_x_log10()
grid.arrange(plot1, plot2, ncol = 2)
qplot(data = diamonds, x = price, y = price) +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price Log(10) by Carat')
plot(x, col=(3-y))
set.seed(1)
x = matrix(rnorm(20*2), ncol = 2)
y=c(rep(-1,10), rep(1,10))
x[y==1,]=x[y==1, ] + 1
plot(x, col=(3-y))
install.packages('e1071')
plot(x, col=(3-y))
dat=data.frame(x=x,y=as.factor(y))
library(e1071)
svmfit=svm(y~., data = dat, kernel="linear", cost=10, scale=FALSE)
plot(svmfit, dat)
plot(svmfit, dat)
svmfit$index
summary(svmfit)
summary(svmfit)
svmfit=svm(y~., data = dat, kernel='linear', cost=0.1, scale=FALSE)
plot(svmfit, dat)
svmfit$index
set.seed(1)
tune.out = tune(svnm, y~., data=dat, kernel="linear", ranges = list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune.out)
set.seed(1)
tune.out = tune(svm, y~., data=dat, kernel="linear", ranges = list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune.out)
bestmod = tune.out$best.model
summary(bestmod)
bestmod = tune.out$best.model
summary(bestmod)
xtest = matrix(rnorm(20*2), ncol = 2)
ytest = sample(c(-1,1), 20, rep=TRUE)
xtest[y==1,]=xtest[ytest==1, ] + 1
testdat = data.frame(x=xtest, y=as.factor(ytest))
ypred = predict(bestmod, testdat)
table(predict=ypred, truth=testdat$y)
bestmod = tune.out$best.model
summary(bestmod)
xtest = matrix(rnorm(20*2), ncol = 2)
ytest = sample(c(-1,1), 20, rep=TRUE)
xtest[ytest==1,]=xtest[ytest==1, ] + 1
testdat = data.frame(x=xtest, y=as.factor(ytest))
ypred = predict(bestmod, testdat)
table(predict=ypred, truth=testdat$y)
View(dat)
View(dat)
install.packages('MASS')
install.packages('ISLR')
library(MASS)
library(ISLR)
fix(Boston)
names(Boston)
attach(Boston)
lm.fit = lm(medv~lstat, data=Boston)
lm.fit
attach(Boston)
lm.fit = lm(medv~lstat, data=Boston)
lm.fit
summary(lm.fit)
attach(Boston)
lm.fit = lm(medv~lstat, data=Boston)
lm.fit
summary(lm.fit)
names(lm.fit)
attach(Boston)
lm.fit = lm(medv~lstat, data=Boston)
lm.fit
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
attach(Boston)
lm.fit = lm(medv~lstat, data=Boston)
lm.fit
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
cat('\014')
attach(Boston)
lm.fit = lm(medv~lstat, data=Boston)
lm.fit
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit, data.frame(lstat(5, 10, 15)), interval = "confidence")
coef(lm.fit)
confint(lm.fit)
predict(lm.fit, data.frame(lstat=c(5, 10, 15)), interval = "confidence")
predict(lm.fit, data.frame(lstat=c(5, 10, 15)), interval = "prediction")
plot(lstat, medv)
abline(lm.fit)
abline(lm.fit, lwd=3)
abline(lm.fit, lwd=3, col="red")
plot(lstat, medv)
abline(lm.fit) # Plot with Regression Line
abline(lm.fit, lwd=3) ## Make line thicker
abline(lm.fit, lwd=3, col="red") ## Make the line thicker and red!
plot(lstat, medv, pch=20)
plot(lstat, medv, pch="+")
plot(lstat, medv, pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
library(MASS)
library(ISLR)
fix(Boston)
lm.fit ~ lm(medc~lstat+age, data=Boston)
summary(lm.fit)
lm.fit ~ lm(medc~lstat+age, data=Boston)
summary(lm.fit)
lm.fit ~ lm(medc~lstat+age, data=Boston)
summary(lm.fit)
lm.fit ~ lm(medv~lstat+age, data=Boston)
summary(lm.fit)
lm.fit = lm(medv~lstat+age, data=Boston)
summary(lm.fit)
vif(lm.fit)
lm.fit = lm(medv~lstat+age, data=Boston)
summary(lm.fit)
library(cars)
vif(lm.fit)
lm.fit = lm(medv~lstat+age, data=Boston)
summary(lm.fit)
library(car)
vif(lm.fit)
lm.fit = lm(medv~lstat+age, data=Boston)
summary(lm.fit)
library(car)
vif(lm.fit)
lm.fit.1 = lm(medv~.-age, data = Boston)
summary(lm.fit.1)
lm.non.linear = lm(medv~lstat+I(lstat^2), data = Boston)
summary(lm.non.linear)
lm.fit = lm(medv~lstat)
anova(lm.fit, lm.non.linear)
lm.fit = lm(medv~lstat, data = Boston)
anova(lm.fit, lm.non.linear)
lm.fit = lm(medv~lstat, data = Boston)
anova(lm.fit, lm.non.linear)
par(mfrow-c(2,2))
plot(lm.non.linear)
anova(lm.fit, lm.non.linear)
par(mfrow=c(2,2))
plot(lm.non.linear)
lm.fit = lm(medv~lstat, data = Boston)
anova(lm.fit, lm.non.linear)
par(mfrow=c(2,2))
plot(lm.non.linear)
lm.fit.3 = lm(mdev~poly(lstat,5))
summary(lm.fit.3)
lm.fit.3 = lm(medv~poly(lstat,5))
summary(lm.fit.3)
lm.fit.3 = lm(medv~poly(lstat,5), data = Boston)
summary(lm.fit.3)
fix(Carseats)
names(Carseats)
fix(Carseats)
names(Carseats)
lm.fit = lm(Sales~.+Income:Advertising + Price:Age, data = Carseats)
summary(lm.fit)
LoadLibraries = function(){
library(ISLR)
+ library(MASS)
+ print("The libraries have been loaded.")
}
LoadLibraries()
print("The libraries have been loaded.")
library(Cars)
library(car)
attach(cars)
lm.fit = lm(mpg~horsepower, data = cars)
set.seed(2000)
x=rnorm(100)
y=2*x+rnorm(100)
lm.fit = lm(y~x+0)
summary(lm.fit)
('/014')
lm.fit.no.intercept = lm(y~x+0)
summary(lm.fit.no.intercept)
lm.fit.with.intercept = lm(y~x)
summary(lm.fit.with.intercept)
('/014')
lm.fit.no.intercept = lm(y~x+0)
summary(lm.fit.no.intercept)
lm.fit.with.intercept = lm(y~x)
summary(lm.fit.with.intercept)
#comparision
anova(lm.fit.no.intercept, lm.fit.with.intercept)
anova(lm.fit.no.intercept, lm.fit.with.intercept)
t.test(y~x)
gre_scores_with_mean <- with(gre_scores,
data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:4)))
## view data frame
gre_scores_with_mean
gre_scores_with_mean$rankP <- predict(mylogit, gre_scores_with_mean = gre_scores_with_mean, type = "response")
gre_scores_with_mean
## http://www.ats.ucla.edu/stat/r/dae/logit.htm
setwd('/Users/lalo/CodingComplication/DataScienceProjects/Statistical_Learning_In_R/Logistic_Regression/')
library(aod)
library(ggplot2)
library(Rcpp)
gre_scores <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
## view the first few rows of the data
head(gre_scores)
summary(gre_scores)
sapply(gre_scores, sd)
xtabs(~ admit + rank, data = gre_scores)
gre_scores$rank <- factor(gre_scores$rank)
mylogit <- glm(admit ~ gre + gpa + rank, data = gre_scores, family = "binomial")
summary(mylogit)
l <- cbind(0,0,0,1,-1,0)
wald.test(b = coef(mylogit), Sigma = vcov(mylogit), L = l)
## Odds Response
exp(coef(mylogit))
## odds ratios and 95% CI
exp(cbind(OR = coef(mylogit), confint(mylogit)))
gre_scores_with_mean <- with(gre_scores,
data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:4)))
## view data frame
gre_scores_with_mean
gre_scores_with_mean$rankP <- predict(mylogit, gre_scores_with_mean = gre_scores_with_mean, type = "response")
gre_scores_with_mean
## http://www.ats.ucla.edu/stat/r/dae/logit.htm
gre_scores_with_mean <- with(gre_scores,
data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:4)))
## view data frame
gre_scores_with_mean
gre_scores_with_mean$rankP <- predict(mylogit, gre_scores_with_mean = gre_scores_with_mean, type = "response")
gre_scores_with_mean
## http://www.ats.ucla.edu/stat/r/dae/logit.htm
newdata2 <- with(gre_scores,
data.frame(gre = rep(seq(from = 200, to = 800, length.out = 100), 4),
gpa = mean(gpa), rank = factor(rep(1:4, each = 100))))
newdata2 <- with(gre_scores, data.frame(gre = rep(seq(from = 200, to = 800, length.out = 100), 4), gpa = mean(gpa), rank = factor(rep(1:4, each = 100))))
newdata3 <- cbind(newdata2, predict(mylogit, newdata = newdata2, type="link", se=TRUE))
newdata3 <- within(newdata3, {PredictedProb <- plogis(fit) LL <- plogis(fit - (1.96 * se.fit)) UL <- plogis(fit + (1.96 * se.fit))})
newdata3 <- within(newdata3, {PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))})
newdata3 <- within(newdata3, {PredictedProb <- plogis(fit),
LL <- plogis(fit - (1.96 * se.fit)),
UL <- plogis(fit + (1.96 * se.fit))})
newdata3 <- within(newdata3,{PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
newdata3 <- cbind(newdata2, predict(mylogit, newdata = newdata2, type="link", se=TRUE))
newdata3 <- within(newdata3,{PredictedProb <- plogis(fit) LL <- plogis(fit - (1.96 * se.fit)) UL <- plogis(fit + (1.96 * se.fit))})
newdata3 <- cbind(newdata2, predict(mylogit, gre_scores_with_mean = newdata2, type="link", se=TRUE))
newdata3 <- cbind(newdata2, predict(mylogit, gre_scores_with_mean = newdata2, type="link", se=TRUE))
newdata3 <- within(newdata3,{PredictedProb <- plogis(fit) LL <- plogis(fit - (1.96 * se.fit)) UL <- plogis(fit + (1.96 * se.fit))})
head(newdata)
ggplot(newdata3, aes(x = gre, y = PredictedProb)) +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = rank), alpha = .2) +
geom_line(aes(colour = rank), size=1)
ggplot(newdata3, aes(x = gre, y = PredictedProb)) + geom_ribbon(aes(fill = rank), alpha = .2) + geom_line(aes(colour = rank), size=1)
